package com.cxwl.hurry.doorlock.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOG".
*/
public class LogDao extends AbstractDao<Log, Long> {

    public static final String TABLENAME = "LOG";

    /**
     * Properties of entity Log.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mac = new Property(1, String.class, "mac", false, "mac");
        public final static Property Kaimenshijian = new Property(2, String.class, "kaimenshijian", false, "kaimenshijian");
        public final static Property Kaimenfangshi = new Property(3, String.class, "kaimenfangshi", false, "kaimenfangshi");
        public final static Property Kaimenjietu = new Property(4, String.class, "kaimenjietu", false, "kaimenjietu");
    }


    public LogDao(DaoConfig config) {
        super(config);
    }
    
    public LogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"mac\" TEXT," + // 1: mac
                "\"kaimenshijian\" TEXT," + // 2: kaimenshijian
                "\"kaimenfangshi\" TEXT," + // 3: kaimenfangshi
                "\"kaimenjietu\" TEXT);"); // 4: kaimenjietu
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Log entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String kaimenshijian = entity.getKaimenshijian();
        if (kaimenshijian != null) {
            stmt.bindString(3, kaimenshijian);
        }
 
        String kaimenfangshi = entity.getKaimenfangshi();
        if (kaimenfangshi != null) {
            stmt.bindString(4, kaimenfangshi);
        }
 
        String kaimenjietu = entity.getKaimenjietu();
        if (kaimenjietu != null) {
            stmt.bindString(5, kaimenjietu);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Log entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String kaimenshijian = entity.getKaimenshijian();
        if (kaimenshijian != null) {
            stmt.bindString(3, kaimenshijian);
        }
 
        String kaimenfangshi = entity.getKaimenfangshi();
        if (kaimenfangshi != null) {
            stmt.bindString(4, kaimenfangshi);
        }
 
        String kaimenjietu = entity.getKaimenjietu();
        if (kaimenjietu != null) {
            stmt.bindString(5, kaimenjietu);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Log readEntity(Cursor cursor, int offset) {
        Log entity = new Log( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mac
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // kaimenshijian
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // kaimenfangshi
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // kaimenjietu
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Log entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMac(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKaimenshijian(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKaimenfangshi(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKaimenjietu(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Log entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Log entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Log entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
